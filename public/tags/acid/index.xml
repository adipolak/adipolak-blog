<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ACID on Adi Polak</title>
    <link>https://blog.adipolak.com/tags/acid/</link>
    <description>Recent content in ACID on Adi Polak</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;#169; 2020 Adi Polak. All rights reserved.</copyright>
    <lastBuildDate>Thu, 04 Feb 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.adipolak.com/tags/acid/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Delta Lake essential Fundamentals: Part 1 - ACID</title>
      <link>https://blog.adipolak.com/post/delta-lake-essential-fundamentals/</link>
      <pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.adipolak.com/post/delta-lake-essential-fundamentals/</guid>
      <description>&lt;p&gt;ðŸŽ‰ Welcome to the first part of Delta Lake essential fundamentals! ðŸŽ‰&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-delta-lake-&#34;&gt;What is Delta Lake ?&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Delta Lake is an open-source storage layer that brings ACID&#xA;transactions to Apache Sparkâ„¢ and big data workloads. &lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;DeltaLake open source consists of 3 projects:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/delta-io/delta&#34;&gt;detla&lt;/a&gt; - Delta Lake core, written in Scala.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/delta-io/delta-rs&#34;&gt;delta-rs&lt;/a&gt; - Rust library for binding with Python and Ruby.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/delta-io/connectors&#34;&gt;connectors&lt;/a&gt; - Connectors to popular big data engines outside Spark, written mostly in Scala.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Delta provides us the ability to &lt;u&gt;&amp;ldquo;travel back in time&amp;rdquo;&lt;/u&gt; into previous versions of our data, &lt;u&gt;scalable metadata&lt;/u&gt; - that means if we have a large set of raw data stored in a data lake, having metadata provides us with the flexibility needed for analytics and exploration of the data. It also provides a mechanism to &lt;u&gt;unify streaming and batch data&lt;/u&gt;.&lt;br&gt;&#xA;&lt;u&gt;Schema enforcement&lt;/u&gt; - handle schema variations to prevent insertion of bad/non-compliant records, and &lt;u&gt;ACID transactions&lt;/u&gt; to ensure that the users/readers never see inconsistent data.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
